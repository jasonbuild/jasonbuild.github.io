[{"authors":["admin"],"categories":null,"content":"I am is a full-stack engineer. He has extensive experiences in scalable data collection, machine learning, and web applications prototypeing.\nThis is my personal website for knowledge shareing and idea demostration.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://jasonbuild.github.io/author/jason-build/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/jason-build/","section":"authors","summary":"I am is a full-stack engineer. He has extensive experiences in scalable data collection, machine learning, and web applications prototypeing.\nThis is my personal website for knowledge shareing and idea demostration.","tags":null,"title":"Jason Build","type":"authors"},{"authors":[],"categories":[],"content":"nginx reverse proxy configuration server { listen 80; server_name _; location / { include proxy_params; proxy_pass http://127.0.0.1:port; auth_basic \u0026quot;Restricted Content\u0026quot;; auth_basic_user_file /etc/nginx/.htpasswd; } }  setup .htaccess sudo apt-get update sudo apt-get install nginx # create entry with username sudo sh -c \u0026quot;echo -n 'yourusername:' \u0026gt;\u0026gt; /etc/nginx/.htpasswd\u0026quot; # create password sudo sh -c \u0026quot;openssl passwd -apr1 \u0026gt;\u0026gt; /etc/nginx/.htpasswd\u0026quot; # https://passwordsgenerator.net/ # view entry cat /etc/nginx/.htpasswd sudo vim /etc/nginx/sites-enabled/default # delete all content and replace with new entry # sudo ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default sudo service nginx restart sudo ufw delete allow \u0026lt;port\u0026gt;  ","date":1592415537,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592415537,"objectID":"5097d3fc772dd28cc1ee74e966c76d32","permalink":"https://jasonbuild.github.io/post/nginx/","publishdate":"2020-06-18T01:38:57+08:00","relpermalink":"/post/nginx/","section":"post","summary":"nginx reverse proxy configuration server { listen 80; server_name _; location / { include proxy_params; proxy_pass http://127.0.0.1:port; auth_basic \u0026quot;Restricted Content\u0026quot;; auth_basic_user_file /etc/nginx/.htpasswd; } }  setup .htaccess sudo apt-get update sudo apt-get install nginx # create entry with username sudo sh -c \u0026quot;echo -n 'yourusername:' \u0026gt;\u0026gt; /etc/nginx/.","tags":[],"title":"nginx reverse proxy with .htaccess","type":"post"},{"authors":[],"categories":[],"content":"Install hugo on mac Use the script from https://rimdev.io/hugo-extended-latest-install-script-for-macos/ to install hugo.\nSetup repo Follow the official guide https://sourcethemes.com/academic/docs/deployment/#github-pages to fork the Academic Kickstart repository.\nConfigure your site git add . git commit -m \u0026quot;Initial commit\u0026quot; git push -u origin master  publish to github pages create new post using hugo new --kind post post/hugo\npublish/update github pages\nhugo cd public git add . git commit -m \u0026quot;Build website\u0026quot; git push origin master cd ..  ","date":1592149948,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592149948,"objectID":"1ba1da42e133e1a006844b4b012bf188","permalink":"https://jasonbuild.github.io/post/hugo/","publishdate":"2020-06-14T23:52:28+08:00","relpermalink":"/post/hugo/","section":"post","summary":"Install hugo on mac Use the script from https://rimdev.io/hugo-extended-latest-install-script-for-macos/ to install hugo.\nSetup repo Follow the official guide https://sourcethemes.com/academic/docs/deployment/#github-pages to fork the Academic Kickstart repository.\nConfigure your site git add .","tags":[],"title":"Hugo Setup","type":"post"},{"authors":[],"categories":[],"content":"One common use case of parallel in Python is network requests. One of the most simple solutions to send million of requests is using multiprocessing.dummy.Pool.\nSample code\nimport requests from multiprocessing.dummy import Pool as ThreadPool def fetch(url): resp = requests.get(url) if resp.status_code == 200: content = resp.text else: content = None data = { 'url': url, 'content': content } return data urls = [ ... ] pool = ThreadPool(4) data_list = pool.map(requests.get, urls) pool.close() pool.join()  ","date":1592149581,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592149581,"objectID":"e4726e265f1958ffdb381fddf22e0283","permalink":"https://jasonbuild.github.io/post/python-parallel/","publishdate":"2020-06-14T23:46:21+08:00","relpermalink":"/post/python-parallel/","section":"post","summary":"One common use case of parallel in Python is network requests. One of the most simple solutions to send million of requests is using multiprocessing.dummy.Pool.\nSample code\nimport requests from multiprocessing.","tags":[],"title":"Multi-threaded Python Parallelization","type":"post"}]